<head>
    <style> body { margin: 0; } </style>
    <script src="//unpkg.com/force-graph"></script>
</head>
<body>
<div id="graph"></div>
<div style="position: absolute; top: 50px; right: 50px; font-size: 16px; background-color: white; padding: 10px;">
    <div style="display: flex; align-items: center; margin-bottom: 5px;">
        <div style="width: 20px; height: 10px; background-color: rgb(0,184,0); margin-right: 5px;"></div>
        <span>Transaction</span>
    </div>
    <div style="display: flex; align-items: center;">
        <div style="width: 20px; height: 10px; background-color: rgb(184,0,0); margin-right: 5px;"></div>
        <span>Join</span>
    </div>
    <div style="display: flex; align-items: center;">
        <div style="width: 20px; height: 10px; background-color: rgb(184,184,0); margin-right: 5px;"></div>
        <span>Foreign Keys</span>
    </div>
</div>
<script>
    let data = {{.Data}};
    data.links.forEach(link => {
        const a = data.nodes[link.source_idx];
        const b = data.nodes[link.target_idx];
        !a.neighbors && (a.neighbors = []);
        !b.neighbors && (b.neighbors = []);
        a.neighbors.push(b);
        b.neighbors.push(a);

        !a.links && (a.links = []);
        !b.links && (b.links = []);
        a.links.push(link);
        b.links.push(link);
    });

    let scale = function(value) {
        return 1 + (value - 1) * (12 - 1) / ({{.MaxValue}} - 1)
    }

    let nodeSizeScale = function(value) {
        return 6 + (value - 1) * (20 - 6) / ({{.MaxNumRows}} - 1)
    }

    const highlightNodes = new Set();
    const highlightLinks = new Set();
    let hoverNode = null;

    const Graph = ForceGraph()
    (document.getElementById('graph'))
        .backgroundColor('#101020')
        .graphData(data)
        .nodeId('id')
        .onLinkHover(link => {
            highlightNodes.clear();
            highlightLinks.clear();

            if (link) {
                highlightLinks.add(link);
                highlightNodes.add(link.source);
                highlightNodes.add(link.target);
            }
        })
        .linkColor(link => {
            if (link.type === 'tx') {
                return 'rgb(0,184,0)'
            } else if (link.type === 'join') {
                return 'rgb(184,0,0)'
            } else if (link.type === 'fk') {
                return 'rgb(184,184,0)'
            } else {
                return 'rgb(184,184,184)'
            }
        })
        .linkWidth(link => {
            if (highlightLinks.has(link)) {
                return scale(link.value) * 1.2
            }
            return scale(link.value)
        })
        .linkCurvature('curvature')
        .linkLabel(link => {
            let s = "<center>" + link.value + "</center>"
            if (link.predicates === null) {
                return s
            }
            link.predicates.forEach(pred => {
                s = s + "<br>" + pred
            })
            return s
        })
        .autoPauseRedraw(false) // keep redrawing after engine has stopped
        .linkDirectionalParticles(5)
        .linkDirectionalParticleWidth(link => {
            if (highlightLinks.has(link)) {
                // we want to scale the size of the particle according to the size of the link
                // the particles and links don't scale the same way in the UI, so to make it more equal between the two
                // we use different size modifiers (2.2, 1.8, 1.6, etc) depending on the size of the link
                let val = scale(link.value) * 1.2
                if (val <= 2) {
                    return val * 2.2
                } else if (val <= 4) {
                    return val * 1.8
                } else if (val <= 6) {
                    return val * 1.6
                } else if (val <= 8) {
                    return val * 1.35
                } else if (val <= 10) {
                    return val * 1.1
                } else {
                    return val
                }
            }
            return 0
        })
        .nodeCanvasObject((node, ctx, globalScale) => {
            const label = node.id;
            let fontSize = 8/(globalScale/2);
            if (fontSize >= 12) {
                fontSize = 12
            }
            ctx.font = fontSize+'px Sans-Serif';

            ctx.fillStyle = 'rgb(255,255,255)';
            if (highlightNodes.has(node)) {
                ctx.fillStyle = node === hoverNode ? 'rgb(151,62,0)' : 'orange';
            }
            ctx.beginPath();
            let nodeSize = nodeSizeScale(node.size)/(globalScale/2);
            if (nodeSize >= 10) {
                nodeSize = 10
            } else if (nodeSize <= 1) {
                nodeSize = 1
            }
            ctx.arc(node.x, node.y, nodeSize, 0, 2 * Math.PI, false);
            ctx.fill();

            ctx.textAlign = 'center';
            ctx.textBaseline = 'hanging';
            ctx.fillStyle = 'rgb(255,255,255)';
            if (highlightNodes.has(node)) {
                ctx.fillStyle = node === hoverNode ? 'rgb(151,62,0)' : 'orange';
            }
            ctx.fillText(label, node.x, node.y+nodeSize+1);

            if (highlightNodes.has(node)) {
                ctx.beginPath();
                ctx.fill();
            }
        })
        .onNodeHover(node => {
            highlightNodes.clear();
            highlightLinks.clear();
            if (node) {
                highlightNodes.add(node);
                if (node.neighbors !== undefined) {
                    node.neighbors.forEach(neighbor => highlightNodes.add(neighbor));
                }
                if (node.links !== undefined) {
                    node.links.forEach(link => highlightLinks.add(link));
                }
            }

            hoverNode = node || null;
        })
        .d3Force('force').strength(link => {
            return data.links[link.index].value * 0.02
        });
</script>
</body>